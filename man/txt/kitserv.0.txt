Kitserv(0) -- API-Extended Server Library

SYNOPSIS
     library "libkitserv"

     Link with -lkitserv and -pthread

     #include <kitserv.h>

DESCRIPTION
     Kitserv reverses the prefix "kitserv_" for its structures, functions, and
     other declarations. Kitserv also defines enums under the "HTTP_" prefix,
     for methods and response statuses.

     The <kitserv.h> header defines the following structures:

	 struct kitserv_config;

	 struct kitserv_request_context;

	 struct kitserv_client;

	 struct kitserv_api_tree;

	 struct kitserv_api_entry;

     The following types are defined:

	 void (*kitserv_api_handler_t)(struct kitserv_client* client, void*
		 state)

	 enum kitserv_http_method

	 enum kitserv_http_response_status

     The following functions are defined:

	 void kitserv_server_start(struct kitserv_config*);

	 int kitserv_http_header_add(struct kitserv_client*, const char* key,
		 const char* fmt, ...);

	 int kitserv_http_header_add_content_type(struct kitserv_client*,
		 const char* mime);

	 int kitserv_http_header_add_content_type_guess(struct
		 kitserv_client*, const char* extension);

	 int kitserv_http_header_add_last_modified(struct kitserv_client*,
		 time_t time);

	 int kitserv_http_handle_static_path(struct kitserv_client* client,
		 const char* path, struct kitserv_request_context* ctx);

	 enum kitserv_http_method kitserv_api_get_request_method(struct
		 kitserv_client*);

	 const char* kitserv_api_get_request_path(struct kitserv_client*);

	 const char* kitserv_api_get_request_query(struct kitserv_client*);

	 off_t kitserv_api_get_request_content_length(struct kitserv_client*);

	 const char* kitserv_api_get_request_cookie(struct kitserv_client*,
		 const char* key);

	 const char* kitserv_api_get_request_cookie_n(struct kitserv_client*,
		 const char* key, int keylen);

	 const char* kitserv_api_get_request_mime_type(struct
		 kitserv_client*);

	 const char* kitserv_api_get_request_disposition(struct
		 kitserv_client*);

	 int kitserv_api_get_request_range(struct kitserv_client*, off_t*
		 start, off_t* end);

	 int kitserv_api_get_request_modified_since_difference(struct
		 kitserv_client*, double* difference, time_t time);

	 int kitserv_api_read_payload(struct kitserv_client*, char* buf, int
		 nbytes);

	 int kitserv_api_write_body(struct kitserv_client*, char* buf, int
		 buflen);

	 int kitserv_api_write_body_fmt(struct kitserv_client*, const char*
		 fmt, ...);

	 void kitserv_api_reset_body(struct kitserv_client*);

	 int kitserv_api_send_file(struct kitserv_client*, int fd, off_t len);

	 int kitserv_api_set_send_range(struct kitserv_client*, off_t from,
		 off_t to);

	 void kitserv_api_set_preserve_headers_on_error(struct
		 kitserv_client*, bool preserve_enabled);

	 void kitserv_api_set_preserve_body_on_error(struct kitserv_client*,
		 bool preserve_enabled);

	 void kitserv_api_set_response_status(struct kitserv_client*, enum
		 kitserv_http_response_status);

	 void kitserv_api_save_state(struct kitserv_client*, void* state);

     Kitserv is initialized with the kitserv_server_start() function. See that
     page for more information about structs and startup.

     Kitserv will always add the following headers to every response. Do not
     add these headers in the endpoint:

	 server

	 content-length

EXAMPLES
     The following example demonstrates a simple server with two endpoints.
     The /api/get endpoint gives the user a cookie when targeted by a POST re-
     quest, and any request for /needscookie/... will require this cookie to
     view files. This example exposes /var/www from the system root and uses
     hard-coded resource directories, which is not recommended but suffices as
     an example.

     #include <kitserv.h>

     static void api_get_cookie(struct kitserv_client*, void* data);
     static void api_use_cookie(struct kitserv_client*, void* data);

     static struct kitserv_api_entry get_cookie_entry = {
	 .prefix = "get",
	 .prefix_length = 3,
	 .method = HTTP_POST,
	 .handler = api_get_cookie,
	 .finishes_path = true,
     };

     static struct kitserv_api_tree get_cookie_branch = {
	 .prefix = "api",
	 .prefix_length = 3,
	 .entries = &get_cookie_entry,
	 .num_subtrees = 0,
	 .num_entries = 1,
     };

     static struct kitserv_api_entry use_cookie_entry = {
	 .prefix = "needscookie",
	 .prefix_length = 11,
	 .method = HTTP_GET,
	 .handler = api_use_cookie,
	 .finishes_path = false,
     };

     static struct kitserv_api_tree tree_root = {
	 .subtrees = &get_cookie_branch,
	 .entries = &use_cookie_entry,
	 .num_subtrees = 1,
	 .num_entries = 1,
     };

     static struct kitserv_request_context context_root = {
	 .root = "/var/www",
	 .root_fallback = NULL,
	 .fallback = NULL,
	 .use_http_append_fallback = false,
     };

     static struct kitserv_config config = {
	 .port_string = "8012",
	 .num_workers = 8,
	 .num_slots = 1024,
	 .bind_ipv4 = false,
	 .bind_ipv6 = true,
	 .silent_mode = false,
	 .http_root_context = &context_root,
	 .api_tree = &tree_root,
     };

     int main()
     {
	 /* this should ideally include some argument checking */
	 kitserv_server_start(&config);
     }

     static void api_get_cookie(struct kitserv_client* client, void* data)
     {
	 kitserv_api_write_body_fmt(client, "You're logged in now!");
	 kitserv_http_header_add_content_type(client, "text/plain");
	 kitserv_http_header_add(client,
				 "set-cookie",
				 "cookie=yummy; Path=/; SameSite=Lax");
	 kitserv_api_set_response_status(client, HTTP_200_OK);
     }

     static void api_use_cookie(struct kitserv_client* client, void* data)
     {
	 const char* cookie;

	 cookie = kitserv_api_get_request_cookie_n(client, "cookie", 6);
	 if (!cookie) {
	     kitserv_api_write_body_fmt(client, "No cookie!");
	     kitserv_api_set_preserve_body_on_error(client, true);
	     kitserv_http_header_add_content_type(client, "text/plain");
	     kitserv_api_set_response_status(client, HTTP_403_PERMISSION_DENIED);
	     return;
	 }
	 kitserv_http_handle_static_path(client,
					 kitserv_api_get_request_path(client),
					 NULL);
     }


COPYRIGHT
     Copyright (c) 2023 Jmcgee1125.

     Kitserv is licensed under the GNU Affero GPL v3. You are free to redis-
     tribute and modify this code as you see fit, provided that you make the
     source code freely available under these terms.
